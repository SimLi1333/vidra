// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/k8s/client_factory.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapter/k8s/client_factory.go -destination=internal/mocks/mock_client_factory.go -package=mock
//

// Package mocks is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClientFactory is a mock of ClientFactory interface.
type MockClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClientFactoryMockRecorder
	isgomock struct{}
}

// MockClientFactoryMockRecorder is the mock recorder for MockClientFactory.
type MockClientFactoryMockRecorder struct {
	mock *MockClientFactory
}

// NewMockClientFactory creates a new mock instance.
func NewMockClientFactory(ctrl *gomock.Controller) *MockClientFactory {
	mock := &MockClientFactory{ctrl: ctrl}
	mock.recorder = &MockClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientFactory) EXPECT() *MockClientFactoryMockRecorder {
	return m.recorder
}

// GetCachedClientFor mocks base method.
func (m *MockClientFactory) GetCachedClientFor(ctx context.Context, serverURL string, k8sClient client.Client) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedClientFor", ctx, serverURL, k8sClient)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedClientFor indicates an expected call of GetCachedClientFor.
func (mr *MockClientFactoryMockRecorder) GetCachedClientFor(ctx, serverURL, k8sClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedClientFor", reflect.TypeOf((*MockClientFactory)(nil).GetCachedClientFor), ctx, serverURL, k8sClient)
}

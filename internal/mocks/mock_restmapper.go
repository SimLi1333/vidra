// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/SimonLinder/go/pkg/mod/k8s.io/apimachinery@v0.31.0/pkg/api/meta/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=/Users/SimonLinder/go/pkg/mod/k8s.io/apimachinery@v0.31.0/pkg/api/meta/interfaces.go -destination=internal/domain/mocks/mock_restmapper.go -package=mock
//

// Package mock_rest is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
)

// MockListMetaAccessor is a mock of ListMetaAccessor interface.
type MockListMetaAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockListMetaAccessorMockRecorder
	isgomock struct{}
}

// MockListMetaAccessorMockRecorder is the mock recorder for MockListMetaAccessor.
type MockListMetaAccessorMockRecorder struct {
	mock *MockListMetaAccessor
}

// NewMockListMetaAccessor creates a new mock instance.
func NewMockListMetaAccessor(ctrl *gomock.Controller) *MockListMetaAccessor {
	mock := &MockListMetaAccessor{ctrl: ctrl}
	mock.recorder = &MockListMetaAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListMetaAccessor) EXPECT() *MockListMetaAccessorMockRecorder {
	return m.recorder
}

// GetListMeta mocks base method.
func (m *MockListMetaAccessor) GetListMeta() meta.List {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMeta")
	ret0, _ := ret[0].(meta.List)
	return ret0
}

// GetListMeta indicates an expected call of GetListMeta.
func (mr *MockListMetaAccessorMockRecorder) GetListMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMeta", reflect.TypeOf((*MockListMetaAccessor)(nil).GetListMeta))
}

// MockMetadataAccessor is a mock of MetadataAccessor interface.
type MockMetadataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataAccessorMockRecorder
	isgomock struct{}
}

// MockMetadataAccessorMockRecorder is the mock recorder for MockMetadataAccessor.
type MockMetadataAccessorMockRecorder struct {
	mock *MockMetadataAccessor
}

// NewMockMetadataAccessor creates a new mock instance.
func NewMockMetadataAccessor(ctrl *gomock.Controller) *MockMetadataAccessor {
	mock := &MockMetadataAccessor{ctrl: ctrl}
	mock.recorder = &MockMetadataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataAccessor) EXPECT() *MockMetadataAccessorMockRecorder {
	return m.recorder
}

// APIVersion mocks base method.
func (m *MockMetadataAccessor) APIVersion(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIVersion", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIVersion indicates an expected call of APIVersion.
func (mr *MockMetadataAccessorMockRecorder) APIVersion(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIVersion", reflect.TypeOf((*MockMetadataAccessor)(nil).APIVersion), obj)
}

// Annotations mocks base method.
func (m *MockMetadataAccessor) Annotations(obj runtime.Object) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Annotations", obj)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Annotations indicates an expected call of Annotations.
func (mr *MockMetadataAccessorMockRecorder) Annotations(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Annotations", reflect.TypeOf((*MockMetadataAccessor)(nil).Annotations), obj)
}

// Continue mocks base method.
func (m *MockMetadataAccessor) Continue(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Continue", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Continue indicates an expected call of Continue.
func (mr *MockMetadataAccessorMockRecorder) Continue(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Continue", reflect.TypeOf((*MockMetadataAccessor)(nil).Continue), obj)
}

// GenerateName mocks base method.
func (m *MockMetadataAccessor) GenerateName(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateName", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateName indicates an expected call of GenerateName.
func (mr *MockMetadataAccessorMockRecorder) GenerateName(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateName", reflect.TypeOf((*MockMetadataAccessor)(nil).GenerateName), obj)
}

// Kind mocks base method.
func (m *MockMetadataAccessor) Kind(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Kind indicates an expected call of Kind.
func (mr *MockMetadataAccessorMockRecorder) Kind(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockMetadataAccessor)(nil).Kind), obj)
}

// Labels mocks base method.
func (m *MockMetadataAccessor) Labels(obj runtime.Object) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Labels", obj)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Labels indicates an expected call of Labels.
func (mr *MockMetadataAccessorMockRecorder) Labels(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Labels", reflect.TypeOf((*MockMetadataAccessor)(nil).Labels), obj)
}

// Name mocks base method.
func (m *MockMetadataAccessor) Name(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockMetadataAccessorMockRecorder) Name(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMetadataAccessor)(nil).Name), obj)
}

// Namespace mocks base method.
func (m *MockMetadataAccessor) Namespace(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Namespace indicates an expected call of Namespace.
func (mr *MockMetadataAccessorMockRecorder) Namespace(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockMetadataAccessor)(nil).Namespace), obj)
}

// ResourceVersion mocks base method.
func (m *MockMetadataAccessor) ResourceVersion(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceVersion", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceVersion indicates an expected call of ResourceVersion.
func (mr *MockMetadataAccessorMockRecorder) ResourceVersion(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceVersion", reflect.TypeOf((*MockMetadataAccessor)(nil).ResourceVersion), obj)
}

// SelfLink mocks base method.
func (m *MockMetadataAccessor) SelfLink(obj runtime.Object) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfLink", obj)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfLink indicates an expected call of SelfLink.
func (mr *MockMetadataAccessorMockRecorder) SelfLink(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfLink", reflect.TypeOf((*MockMetadataAccessor)(nil).SelfLink), obj)
}

// SetAPIVersion mocks base method.
func (m *MockMetadataAccessor) SetAPIVersion(obj runtime.Object, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPIVersion", obj, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPIVersion indicates an expected call of SetAPIVersion.
func (mr *MockMetadataAccessorMockRecorder) SetAPIVersion(obj, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIVersion", reflect.TypeOf((*MockMetadataAccessor)(nil).SetAPIVersion), obj, version)
}

// SetAnnotations mocks base method.
func (m *MockMetadataAccessor) SetAnnotations(obj runtime.Object, annotations map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAnnotations", obj, annotations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockMetadataAccessorMockRecorder) SetAnnotations(obj, annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockMetadataAccessor)(nil).SetAnnotations), obj, annotations)
}

// SetContinue mocks base method.
func (m *MockMetadataAccessor) SetContinue(obj runtime.Object, c string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContinue", obj, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContinue indicates an expected call of SetContinue.
func (mr *MockMetadataAccessorMockRecorder) SetContinue(obj, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContinue", reflect.TypeOf((*MockMetadataAccessor)(nil).SetContinue), obj, c)
}

// SetGenerateName mocks base method.
func (m *MockMetadataAccessor) SetGenerateName(obj runtime.Object, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGenerateName", obj, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGenerateName indicates an expected call of SetGenerateName.
func (mr *MockMetadataAccessorMockRecorder) SetGenerateName(obj, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenerateName", reflect.TypeOf((*MockMetadataAccessor)(nil).SetGenerateName), obj, name)
}

// SetKind mocks base method.
func (m *MockMetadataAccessor) SetKind(obj runtime.Object, kind string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKind", obj, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKind indicates an expected call of SetKind.
func (mr *MockMetadataAccessorMockRecorder) SetKind(obj, kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKind", reflect.TypeOf((*MockMetadataAccessor)(nil).SetKind), obj, kind)
}

// SetLabels mocks base method.
func (m *MockMetadataAccessor) SetLabels(obj runtime.Object, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", obj, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockMetadataAccessorMockRecorder) SetLabels(obj, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockMetadataAccessor)(nil).SetLabels), obj, labels)
}

// SetName mocks base method.
func (m *MockMetadataAccessor) SetName(obj runtime.Object, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", obj, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockMetadataAccessorMockRecorder) SetName(obj, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockMetadataAccessor)(nil).SetName), obj, name)
}

// SetNamespace mocks base method.
func (m *MockMetadataAccessor) SetNamespace(obj runtime.Object, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNamespace", obj, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockMetadataAccessorMockRecorder) SetNamespace(obj, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockMetadataAccessor)(nil).SetNamespace), obj, namespace)
}

// SetResourceVersion mocks base method.
func (m *MockMetadataAccessor) SetResourceVersion(obj runtime.Object, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResourceVersion", obj, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetResourceVersion indicates an expected call of SetResourceVersion.
func (mr *MockMetadataAccessorMockRecorder) SetResourceVersion(obj, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceVersion", reflect.TypeOf((*MockMetadataAccessor)(nil).SetResourceVersion), obj, version)
}

// SetSelfLink mocks base method.
func (m *MockMetadataAccessor) SetSelfLink(obj runtime.Object, selfLink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelfLink", obj, selfLink)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSelfLink indicates an expected call of SetSelfLink.
func (mr *MockMetadataAccessorMockRecorder) SetSelfLink(obj, selfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelfLink", reflect.TypeOf((*MockMetadataAccessor)(nil).SetSelfLink), obj, selfLink)
}

// SetUID mocks base method.
func (m *MockMetadataAccessor) SetUID(obj runtime.Object, uid types.UID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUID", obj, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUID indicates an expected call of SetUID.
func (mr *MockMetadataAccessorMockRecorder) SetUID(obj, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockMetadataAccessor)(nil).SetUID), obj, uid)
}

// UID mocks base method.
func (m *MockMetadataAccessor) UID(obj runtime.Object) (types.UID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UID", obj)
	ret0, _ := ret[0].(types.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UID indicates an expected call of UID.
func (mr *MockMetadataAccessorMockRecorder) UID(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UID", reflect.TypeOf((*MockMetadataAccessor)(nil).UID), obj)
}

// MockRESTScope is a mock of RESTScope interface.
type MockRESTScope struct {
	ctrl     *gomock.Controller
	recorder *MockRESTScopeMockRecorder
	isgomock struct{}
}

// MockRESTScopeMockRecorder is the mock recorder for MockRESTScope.
type MockRESTScopeMockRecorder struct {
	mock *MockRESTScope
}

// NewMockRESTScope creates a new mock instance.
func NewMockRESTScope(ctrl *gomock.Controller) *MockRESTScope {
	mock := &MockRESTScope{ctrl: ctrl}
	mock.recorder = &MockRESTScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTScope) EXPECT() *MockRESTScopeMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockRESTScope) Name() meta.RESTScopeName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(meta.RESTScopeName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRESTScopeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRESTScope)(nil).Name))
}

// MockRESTMapper is a mock of RESTMapper interface.
type MockRESTMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRESTMapperMockRecorder
	isgomock struct{}
}

// MockRESTMapperMockRecorder is the mock recorder for MockRESTMapper.
type MockRESTMapperMockRecorder struct {
	mock *MockRESTMapper
}

// NewMockRESTMapper creates a new mock instance.
func NewMockRESTMapper(ctrl *gomock.Controller) *MockRESTMapper {
	mock := &MockRESTMapper{ctrl: ctrl}
	mock.recorder = &MockRESTMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTMapper) EXPECT() *MockRESTMapperMockRecorder {
	return m.recorder
}

// KindFor mocks base method.
func (m *MockRESTMapper) KindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindFor", resource)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindFor indicates an expected call of KindFor.
func (mr *MockRESTMapperMockRecorder) KindFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindFor", reflect.TypeOf((*MockRESTMapper)(nil).KindFor), resource)
}

// KindsFor mocks base method.
func (m *MockRESTMapper) KindsFor(resource schema.GroupVersionResource) ([]schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindsFor", resource)
	ret0, _ := ret[0].([]schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindsFor indicates an expected call of KindsFor.
func (mr *MockRESTMapperMockRecorder) KindsFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindsFor", reflect.TypeOf((*MockRESTMapper)(nil).KindsFor), resource)
}

// RESTMapping mocks base method.
func (m *MockRESTMapper) RESTMapping(gk schema.GroupKind, versions ...string) (*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMapping", varargs...)
	ret0, _ := ret[0].(*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMapping indicates an expected call of RESTMapping.
func (mr *MockRESTMapperMockRecorder) RESTMapping(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapping", reflect.TypeOf((*MockRESTMapper)(nil).RESTMapping), varargs...)
}

// RESTMappings mocks base method.
func (m *MockRESTMapper) RESTMappings(gk schema.GroupKind, versions ...string) ([]*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMappings", varargs...)
	ret0, _ := ret[0].([]*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMappings indicates an expected call of RESTMappings.
func (mr *MockRESTMapperMockRecorder) RESTMappings(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMappings", reflect.TypeOf((*MockRESTMapper)(nil).RESTMappings), varargs...)
}

// ResourceFor mocks base method.
func (m *MockRESTMapper) ResourceFor(input schema.GroupVersionResource) (schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceFor", input)
	ret0, _ := ret[0].(schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceFor indicates an expected call of ResourceFor.
func (mr *MockRESTMapperMockRecorder) ResourceFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceFor", reflect.TypeOf((*MockRESTMapper)(nil).ResourceFor), input)
}

// ResourceSingularizer mocks base method.
func (m *MockRESTMapper) ResourceSingularizer(resource string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSingularizer", resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceSingularizer indicates an expected call of ResourceSingularizer.
func (mr *MockRESTMapperMockRecorder) ResourceSingularizer(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSingularizer", reflect.TypeOf((*MockRESTMapper)(nil).ResourceSingularizer), resource)
}

// ResourcesFor mocks base method.
func (m *MockRESTMapper) ResourcesFor(input schema.GroupVersionResource) ([]schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesFor", input)
	ret0, _ := ret[0].([]schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesFor indicates an expected call of ResourcesFor.
func (mr *MockRESTMapperMockRecorder) ResourcesFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesFor", reflect.TypeOf((*MockRESTMapper)(nil).ResourcesFor), input)
}

// MockResettableRESTMapper is a mock of ResettableRESTMapper interface.
type MockResettableRESTMapper struct {
	ctrl     *gomock.Controller
	recorder *MockResettableRESTMapperMockRecorder
	isgomock struct{}
}

// MockResettableRESTMapperMockRecorder is the mock recorder for MockResettableRESTMapper.
type MockResettableRESTMapperMockRecorder struct {
	mock *MockResettableRESTMapper
}

// NewMockResettableRESTMapper creates a new mock instance.
func NewMockResettableRESTMapper(ctrl *gomock.Controller) *MockResettableRESTMapper {
	mock := &MockResettableRESTMapper{ctrl: ctrl}
	mock.recorder = &MockResettableRESTMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResettableRESTMapper) EXPECT() *MockResettableRESTMapperMockRecorder {
	return m.recorder
}

// KindFor mocks base method.
func (m *MockResettableRESTMapper) KindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindFor", resource)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindFor indicates an expected call of KindFor.
func (mr *MockResettableRESTMapperMockRecorder) KindFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).KindFor), resource)
}

// KindsFor mocks base method.
func (m *MockResettableRESTMapper) KindsFor(resource schema.GroupVersionResource) ([]schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindsFor", resource)
	ret0, _ := ret[0].([]schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindsFor indicates an expected call of KindsFor.
func (mr *MockResettableRESTMapperMockRecorder) KindsFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindsFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).KindsFor), resource)
}

// RESTMapping mocks base method.
func (m *MockResettableRESTMapper) RESTMapping(gk schema.GroupKind, versions ...string) (*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMapping", varargs...)
	ret0, _ := ret[0].(*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMapping indicates an expected call of RESTMapping.
func (mr *MockResettableRESTMapperMockRecorder) RESTMapping(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapping", reflect.TypeOf((*MockResettableRESTMapper)(nil).RESTMapping), varargs...)
}

// RESTMappings mocks base method.
func (m *MockResettableRESTMapper) RESTMappings(gk schema.GroupKind, versions ...string) ([]*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMappings", varargs...)
	ret0, _ := ret[0].([]*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMappings indicates an expected call of RESTMappings.
func (mr *MockResettableRESTMapperMockRecorder) RESTMappings(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMappings", reflect.TypeOf((*MockResettableRESTMapper)(nil).RESTMappings), varargs...)
}

// Reset mocks base method.
func (m *MockResettableRESTMapper) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockResettableRESTMapperMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResettableRESTMapper)(nil).Reset))
}

// ResourceFor mocks base method.
func (m *MockResettableRESTMapper) ResourceFor(input schema.GroupVersionResource) (schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceFor", input)
	ret0, _ := ret[0].(schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceFor indicates an expected call of ResourceFor.
func (mr *MockResettableRESTMapperMockRecorder) ResourceFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourceFor), input)
}

// ResourceSingularizer mocks base method.
func (m *MockResettableRESTMapper) ResourceSingularizer(resource string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSingularizer", resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceSingularizer indicates an expected call of ResourceSingularizer.
func (mr *MockResettableRESTMapperMockRecorder) ResourceSingularizer(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSingularizer", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourceSingularizer), resource)
}

// ResourcesFor mocks base method.
func (m *MockResettableRESTMapper) ResourcesFor(input schema.GroupVersionResource) ([]schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesFor", input)
	ret0, _ := ret[0].([]schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesFor indicates an expected call of ResourcesFor.
func (mr *MockResettableRESTMapperMockRecorder) ResourcesFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesFor", reflect.TypeOf((*MockResettableRESTMapper)(nil).ResourcesFor), input)
}

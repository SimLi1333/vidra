// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/watch_resource_factory.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/watch_resource_factory.go -destination=internal/mocks/mock_watch_resource_factory.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/infrahub-operator/vidra/internal/domain"
	gomock "go.uber.org/mock/gomock"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	dynamic "k8s.io/client-go/dynamic"
)

// MockDynamicWatcherFactory is a mock of DynamicWatcherFactory interface.
type MockDynamicWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicWatcherFactoryMockRecorder
	isgomock struct{}
}

// MockDynamicWatcherFactoryMockRecorder is the mock recorder for MockDynamicWatcherFactory.
type MockDynamicWatcherFactoryMockRecorder struct {
	mock *MockDynamicWatcherFactory
}

// NewMockDynamicWatcherFactory creates a new mock instance.
func NewMockDynamicWatcherFactory(ctrl *gomock.Controller) *MockDynamicWatcherFactory {
	mock := &MockDynamicWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockDynamicWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicWatcherFactory) EXPECT() *MockDynamicWatcherFactoryMockRecorder {
	return m.recorder
}

// StartWatchingGVRs mocks base method.
func (m *MockDynamicWatcherFactory) StartWatchingGVRs(dynamicClient dynamic.Interface, gvrs []schema.GroupVersionResource, onEvent domain.ResourceCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWatchingGVRs", dynamicClient, gvrs, onEvent)
}

// StartWatchingGVRs indicates an expected call of StartWatchingGVRs.
func (mr *MockDynamicWatcherFactoryMockRecorder) StartWatchingGVRs(dynamicClient, gvrs, onEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWatchingGVRs", reflect.TypeOf((*MockDynamicWatcherFactory)(nil).StartWatchingGVRs), dynamicClient, gvrs, onEvent)
}

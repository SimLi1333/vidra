// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/multicluster_client_factory.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/multicluster_client_factory.go -destination=internal/mocks/mock_multicluster_client_factory.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockDynamicMulticlusterFactory is a mock of DynamicMulticlusterFactory interface.
type MockDynamicMulticlusterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicMulticlusterFactoryMockRecorder
	isgomock struct{}
}

// MockDynamicMulticlusterFactoryMockRecorder is the mock recorder for MockDynamicMulticlusterFactory.
type MockDynamicMulticlusterFactoryMockRecorder struct {
	mock *MockDynamicMulticlusterFactory
}

// NewMockDynamicMulticlusterFactory creates a new mock instance.
func NewMockDynamicMulticlusterFactory(ctrl *gomock.Controller) *MockDynamicMulticlusterFactory {
	mock := &MockDynamicMulticlusterFactory{ctrl: ctrl}
	mock.recorder = &MockDynamicMulticlusterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicMulticlusterFactory) EXPECT() *MockDynamicMulticlusterFactoryMockRecorder {
	return m.recorder
}

// GetCachedClientFor mocks base method.
func (m *MockDynamicMulticlusterFactory) GetCachedClientFor(ctx context.Context, serverURL string, k8sClient client.Client) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedClientFor", ctx, serverURL, k8sClient)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedClientFor indicates an expected call of GetCachedClientFor.
func (mr *MockDynamicMulticlusterFactoryMockRecorder) GetCachedClientFor(ctx, serverURL, k8sClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedClientFor", reflect.TypeOf((*MockDynamicMulticlusterFactory)(nil).GetCachedClientFor), ctx, serverURL, k8sClient)
}

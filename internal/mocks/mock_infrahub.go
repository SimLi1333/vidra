// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/infrahub.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/infrahub.go -destination=internal/mocks/mock_infrahub.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	domain "gitlab.ost.ch/ins-stud/sa-ba/ba-fs25-infrahub/infrahub-operator/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockInfrahubClient is a mock of InfrahubClient interface.
type MockInfrahubClient struct {
	ctrl     *gomock.Controller
	recorder *MockInfrahubClientMockRecorder
	isgomock struct{}
}

// MockInfrahubClientMockRecorder is the mock recorder for MockInfrahubClient.
type MockInfrahubClientMockRecorder struct {
	mock *MockInfrahubClient
}

// NewMockInfrahubClient creates a new mock instance.
func NewMockInfrahubClient(ctrl *gomock.Controller) *MockInfrahubClient {
	mock := &MockInfrahubClient{ctrl: ctrl}
	mock.recorder = &MockInfrahubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfrahubClient) EXPECT() *MockInfrahubClientMockRecorder {
	return m.recorder
}

// DownloadArtifact mocks base method.
func (m *MockInfrahubClient) DownloadArtifact(apiURL, artifactID, targetBranche, targetDate string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArtifact", apiURL, artifactID, targetBranche, targetDate)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadArtifact indicates an expected call of DownloadArtifact.
func (mr *MockInfrahubClientMockRecorder) DownloadArtifact(apiURL, artifactID, targetBranche, targetDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifact", reflect.TypeOf((*MockInfrahubClient)(nil).DownloadArtifact), apiURL, artifactID, targetBranche, targetDate)
}

// Login mocks base method.
func (m *MockInfrahubClient) Login(apiURL, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", apiURL, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockInfrahubClientMockRecorder) Login(apiURL, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockInfrahubClient)(nil).Login), apiURL, username, password)
}

// RunQuery mocks base method.
func (m *MockInfrahubClient) RunQuery(queryName, apiURL, artifactName, targetBranche, targetDate, token string) (*[]domain.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", queryName, apiURL, artifactName, targetBranche, targetDate, token)
	ret0, _ := ret[0].(*[]domain.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockInfrahubClientMockRecorder) RunQuery(queryName, apiURL, artifactName, targetBranche, targetDate, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockInfrahubClient)(nil).RunQuery), queryName, apiURL, artifactName, targetBranche, targetDate, token)
}

name: Operator CI
on:
  push:
      branches: [ "main" ]
      tags: [ 'v*.*.*' ]
      paths:
          - 'cmd/**'
          - 'go.*'
          - 'api/**'
          - 'internal/**'
          - 'config/**'
          - 'hack/**'
          - 'test/**'
          - 'Dockerfile'
          - 'chart/**'
          - 'bundle.Dockerfile'
          - '.dockerignore'
          - 'Makefile'
          - '.github/workflows/main.yaml'
  pull_request:
      branches: [ "main" ]
      paths:
          - 'cmd/**'
          - 'go.*'
          - 'api/**'
          - 'internal/**'
          - 'config/**'
          - 'hack/**'
          - 'test/**'
          - 'Dockerfile'
          - 'chart/**'
          - 'bundle.Dockerfile'
          - '.dockerignore'
          - 'Makefile'
          - '.github/workflows/main.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  OPERATOR_SDK_VERSION: v1.39.2
  OS: linux
  TARGETARCH: amd64
  GO111MODULE: "on"
  GOCACHE: ${{ github.workspace }}/.cache/go-build
  GOPATH: ${{ github.workspace }}/.cache/go
  CGO_ENABLED: "0"
  ENVTEST_K8S_VERSION: "1.31.0"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: read
      id-token: write
    container: golang:1.24
    continue-on-error: true
    env:
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            .cache/go
            .cache/go-build
          key: ${{ runner.os }}-go-${{ github.ref_name }}
      - run: go version
      - run: make fmt
      - run: make vet
      - run: make lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      actions: read
      packages: read
      id-token: write
    container: golang:1.24
    env:
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            .cache/go
            .cache/go-build
          key: ${{ runner.os }}-go-${{ github.ref_name }}
      - run: go version
      - run: make test 
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
 
  build-push:
      name: Build and Push Operator Image
      if: startsWith(github.ref, 'refs/tags/v')
      needs: unit-test
      runs-on: ubuntu-latest
      permissions:
        contents: write
        packages: write
        id-token: write
      steps:
        - uses: actions/checkout@v3
        - uses: docker/setup-qemu-action@v2
          with:
            platforms: amd64
        - uses: docker/setup-buildx-action@v2
        - name: Log into registry ${{ env.REGISTRY }}
          uses: docker/login-action@v2
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Extract Docker metadata
          id: meta
          uses: docker/metadata-action@v4
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        - name: Build and push Docker image
          id: build-and-push
          uses: docker/build-push-action@v4
          with:
            file: "Dockerfile"
            context: .
            platforms: linux/amd64
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
        - name: Install operator-sdk
          run: |
              curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk_${OS}_${TARGETARCH} \
              && chmod +x operator-sdk_${OS}_${TARGETARCH} \
              && mv operator-sdk_${OS}_${TARGETARCH} /usr/local/bin/operator-sdk \
              && echo $(operator-sdk version)
        - name: Create Bundle and Catalog and push to registry
          run: |
              make bundle
              make bundle-build bundle-push
              make catalog-build catalog-push

  helm-chart:
    name: Push Helm Chart
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - name: Extract tag version (e.g. v0.0.2 -> 0.0.2)
        shell: bash
        run: echo "TAG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: helmify
        run: make helm

      - name: Package Helm chart
        run: |
          mkdir -p .deploy
          helm package charts/vidra-operator --destination .deploy

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            .deploy/vidra-operator-${{ env.TAG_VERSION }}.tgz
            .deploy/index.yaml

      - name: Create Helm repo index
        run: |
          helm repo index .deploy --url https://infrahub-operator.github.io/vidra

      - name: Upload to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .deploy
          publish_branch: gh-pages
          keep_files: true  # Keeps existing files like older chart versions
      
      - name: Chart | Push
        uses: appany/helm-oci-chart-releaser@v0.3.0
        with:
          name: vidra-operator
          repository: ${{ github.repository }}/helm-charts
          tag: ${{ env.TAG_VERSION }}
          path: charts/vidra-operator
          registry: ghcr.io
          registry_username: ${{ github.repository_owner }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-push, helm-chart]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Create GitHub Release
        run: gh release create ${{ github.ref_name }} --generate-notes --verify-tag
        
  sign-image:
    name: Sign Docker Image
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    needs: build-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: main
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_YES: "true"
        run: echo "${{ needs.build-push.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ needs.build-push.outputs.digest }}

  update-version--in-install-yamls:
    name: Update Version in Install YAMLs
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-push
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in install/catalogsource.yaml and install/subscription.yaml
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s|^\(\s*image:\s*ghcr.io/infrahub-operator/vidra-catalog:\).*|\1v$VERSION|" install/catalogsource.yaml
          sed -i "s|^\(\s*startingCSV:\s*\).*|\1vidra-operator.v$VERSION|" install/subscription.yaml
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add install/catalogsource.yaml install/subscription.yaml
          git commit -m "chore: update version to $VERSION in catalogsource and subscription" || echo "No changes to commit"
          git push || echo "No changes to push"
      - name: Create Pull Request for Version Update
        uses: peter-evans/create-pull-request@v4
        with:
          title: "chore: update version in install YAMLs to ${{ github.ref_name }}"
          body: "This PR updates the version in install/catalogsource.yaml and install/subscription.yaml to ${{ github.ref_name }}."
          branch: update-version-${{ github.ref_name }}
          commit-message: "chore: update version in install YAMLs to ${{ github.ref_name }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          labels: "chore"
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3289],{118:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"topics/desicions/multirepo","title":"Monorepo vs Multirepo for Vidra, CLI, and Documentation","description":"Context and Problem Statement","source":"@site/docs/topics/desicions/0016-multirepo.mdx","sourceDirName":"topics/desicions","slug":"/topics/desicions/multirepo","permalink":"/vidra/topics/desicions/multirepo","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"title":"Monorepo vs Multirepo for Vidra, CLI, and Documentation","sidebar_position":17},"sidebar":"docsSidebar","previous":{"title":"Implementing the 4th GitOps Principle in Vidra Operator","permalink":"/vidra/topics/desicions/0015-4th-principle"},"next":{"title":"Event-Driven vs. Owns-Based Reconciliation for Managed Resources","permalink":"/vidra/topics/desicions/eventbased-k8s"}}');var t=o(4848),s=o(8453);const r={title:"Monorepo vs Multirepo for Vidra, CLI, and Documentation",sidebar_position:17},a="Monorepo vs Multirepo for Vidra, CLI, and Documentation",d={},c=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"Considered Options",id:"considered-options",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Consequences",id:"consequences",level:3}];function l(e){const n={br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"monorepo-vs-multirepo-for-vidra-cli-and-documentation",children:"Monorepo vs Multirepo for Vidra, CLI, and Documentation"})}),"\n",(0,t.jsx)(n.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,t.jsx)(n.p,{children:"We needed to decide whether to maintain separate repositories for Vidra, the CLI, and the documentation, or to combine them into a single repository."}),"\n",(0,t.jsx)(n.p,{children:"While multiple repositories can provide isolation, they introduce complexity in versioning and coordination. Our use case requires tight coupling between the CLI and Vidra, and consistent documentation updates alongside releases."}),"\n",(0,t.jsx)(n.h2,{id:"considered-options",children:"Considered Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Multiple repositories"}),(0,t.jsx)(n.br,{}),"\n","Each component (Vidra, CLI, documentation) in its own repository. This increases isolation but complicates versioning, dependency management, and release coordination."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Single monorepo"}),(0,t.jsx)(n.br,{}),"\n","All components in one repository. This simplifies versioning, dependency management, and ensures consistency across all parts of the project."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"decision-outcome",children:"Decision Outcome"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:'Chosen option: "single monorepo"'}),", because the CLI is a supporting tool tightly coupled with Vidra's version, and a monorepo allows us to release all components together in a single pipeline under one coherent version."]}),"\n",(0,t.jsx)(n.h3,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Good, because all development, releases, and documentation updates are managed in one place, making coordination and integration easier."}),"\n",(0,t.jsx)(n.li,{children:"Bad, because the repository may grow larger and require clear structure and ownership to avoid confusion."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7068],{6556:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/desicions/0015-4th-principle","title":"Implementing the 4th GitOps Principle in Vidra Operator","description":"Context and Problem Statement","source":"@site/docs/topics/desicions/0015-4th-principle.md","sourceDirName":"topics/desicions","slug":"/topics/desicions/0015-4th-principle","permalink":"/vidra/topics/desicions/0015-4th-principle","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"title":"Implementing the 4th GitOps Principle in Vidra Operator","sidebar_position":16},"sidebar":"cliSidebar","previous":{"title":"Simplifying Vidra Operator Resource Provisioning with a CLI","permalink":"/vidra/topics/desicions/cli"},"next":{"title":"Monorepo vs Multirepo for Vidra, CLI, and Documentation","permalink":"/vidra/topics/desicions/multirepo"}}');var s=n(4848),o=n(8453);const r={title:"Implementing the 4th GitOps Principle in Vidra Operator",sidebar_position:16},c="Implementing the 4th GitOps Principle in Vidra Operator",a={},l=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"Considered Options",id:"considered-options",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Consequences",id:"consequences",level:3}];function d(e){const i={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"implementing-the-4th-gitops-principle-in-vidra-operator",children:"Implementing the 4th GitOps Principle in Vidra Operator"})}),"\n",(0,s.jsx)(i.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,s.jsxs)(i.p,{children:["The 4th GitOps principle states:",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.strong,{children:'"Software agents continuously observe actual system state and attempt to apply the desired state."'})]}),"\n",(0,s.jsxs)(i.p,{children:["During implementation, we realized that ",(0,s.jsx)(i.code,{children:"VidraResource"})," reconciliation must also run in a loop to ensure the actual state matches the desired state."]}),"\n",(0,s.jsx)(i.h2,{id:"considered-options",children:"Considered Options"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Time-based reconciliation loop"}),(0,s.jsx)(i.br,{}),"\n","Implement a simple loop that periodically checks the state of managed resources and reconciles them if they differ from the desired state. This is straightforward and ensures regular updates."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Event-based reconciliation"}),(0,s.jsx)(i.br,{}),"\n","Trigger reconciliation immediately when relevant changes are detected in managed resources. This provides rapid response to changes but may be more resource intensive."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"decision-outcome",children:"Decision Outcome"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Chosen option: Both time-based and event-based reconciliation"}),", because it combines the reliability of periodic checks with the responsiveness of event-driven updates and allows the user to configure the reconciliation interval how he wants."]}),"\n",(0,s.jsxs)(i.p,{children:["We first implemented a simple, time-based reconciliation loop using the ",(0,s.jsx)(i.code,{children:"reconcileAfter"})," return value. The interval is configurable via Vidra ",(0,s.jsx)(i.code,{children:"ConfigMap"}),", allowing operators to tune how often reconciliation occurs."]}),"\n",(0,s.jsx)(i.p,{children:"We then added event-based reconciliation, which triggers reconciliation immediately when relevant changes are detected in managed resources. This enables faster reaction to changes but may be more resource intensive."}),"\n",(0,s.jsx)(i.h3,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Good, because it combines reliability (periodic checks) with responsiveness (event-driven updates)."}),"\n",(0,s.jsx)(i.li,{children:"Good, because it allows operators to configure the reconciliation interval based on their specific needs and resource constraints."}),"\n",(0,s.jsx)(i.li,{children:"Bad, because event-based reconciliation can be more resource intensive, so careful configuration and monitoring are required."}),"\n",(0,s.jsx)(i.li,{children:"Bad, because implementing both mechanisms increases complexity, requiring careful management of reconciliation logic to avoid conflicts or redundant operations / reconciliation loops."}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>c});var t=n(6540);const s={},o=t.createContext(s);function r(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);
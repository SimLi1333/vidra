"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4077],{2487:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/infrahub","title":"Preparing Infrahub","description":"This guide assumes you have a running Infrahub instance and the Vidra Operator installed in your Kubernetes cluster. If you haven\'t set up Infrahub yet, please refer to the Infrahub installation guide.","source":"@site/docs/guides/infrahub.md","sourceDirName":"guides","slug":"/guides/infrahub","permalink":"/vidra/guides/infrahub","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Preparing Infrahub","sidebar_position":2},"sidebar":"cliSidebar","previous":{"title":"Installing Vidra","permalink":"/vidra/guides/install"},"next":{"title":"Using Vidra","permalink":"/vidra/guides/usage"}}');var a=t(4848),i=t(8453),s=t(7293);const o={title:"Preparing Infrahub",sidebar_position:2},l=void 0,c={},d=[{value:"GraphQL Queries",id:"graphql-queries",level:2},{value:"Query ArtifactIDs",id:"query-artifactids",level:3},{value:"Example Query Webserver Details",id:"example-query-webserver-details",level:3},{value:"Example Transformator",id:"example-transformator",level:2},{value:"Example YAML Template",id:"example-yaml-template",level:2},{value:"Example \xecnfrahub.yaml`",id:"example-\xecnfrahubyaml",level:2},{value:"Example Schema for Webserver:",id:"example-schema-for-webserver",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.A,{type:"note",title:"Note",children:(0,a.jsxs)(n.p,{children:["This guide assumes you have a running Infrahub instance and the Vidra Operator installed in your Kubernetes cluster. If you haven't set up Infrahub yet, please refer to the ",(0,a.jsx)(n.a,{href:"https://docs.infrahub.app/guides/installation",children:"Infrahub installation guide"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["To use Infrahub, you need to define a schema resembling your resources (we created ",(0,a.jsx)(n.code,{children:"Webserver"})," containing ",(0,a.jsx)(n.code,{children:"Deployment"}),", ",(0,a.jsx)(n.code,{children:"Service"})," and ",(0,a.jsx)(n.code,{children:"Ingres"})," and another one ",(0,a.jsx)(n.code,{children:"VirtualMachine"}),"). See the ",(0,a.jsx)(n.a,{href:"https://docs.infrahub.app/topics/schema",children:"Infrahub schema documentation"})," for more information. A example schema for a ",(0,a.jsx)(n.code,{children:"Webserver"})," resource is provided undder ",(0,a.jsx)(n.a,{href:"https://infrahub-operator.github.io/vidra/guides/infrahub#example-schema-for-webserver",children:"https://infrahub-operator.github.io/vidra/guides/infrahub#example-schema-for-webserver"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This guide will show you how to prepare Infrahub for use with the Vidra Operator on the example of a ",(0,a.jsx)(n.code,{children:"Webserver"})," resource."]}),"\n",(0,a.jsx)(s.A,{type:"note",title:"Note",children:(0,a.jsx)(n.p,{children:"There will be a Demo Repo with all the necessary resources to get started with Infrahub and Vidra Operator. You will be able to fork the repo and use it as a starting point for your own Infrahub instance."})}),"\n",(0,a.jsx)(n.h2,{id:"graphql-queries",children:"GraphQL Queries"}),"\n",(0,a.jsx)(n.p,{children:"Vidra Operator uses one GraphQL query to fetch the necessary ID's of the relevant Artifacts. Below is the query which needs to be added to Infrahub."}),"\n",(0,a.jsx)(s.A,{type:"note",title:"Note",children:(0,a.jsxs)(n.p,{children:["You can add GraphQL queries to Infrahub using the Infrahub UI, the Infrahub CLI, or through ",(0,a.jsx)(n.a,{href:"https://docs.infrahub.app/overview/versioning#integration-with-git",children:"git integration"}),". For reproducibility, we recommend using git integration, as demonstrated in this guide."]})}),"\n",(0,a.jsx)(n.h3,{id:"query-artifactids",children:"Query ArtifactIDs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"query ArtifactIDs($artifactname: [String]) {\n    CoreArtifact(name__values: $artifactname) {\n        edges {\n            node {\n                id\n                storage_id {\n                    id\n                }\n                checksum {\n                    value\n                }\n                name {\n                    value\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The following query is used to get ",(0,a.jsx)(n.code,{children:"Webserver"})," resources and is needed in the transormator later on."]}),"\n",(0,a.jsx)(n.h3,{id:"example-query-webserver-details",children:"Example Query Webserver Details"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-graphql",children:"query GetWebserver($webserver: String!) {\n    KubernetesWebserver(name__value: $webserver) {\n        edges {\n            node {\n                name {\n                    value\n                }\n                port {\n                    value\n                }\n                containerport {\n                    value\n                }\n                replicas {\n                    value\n                }\n                image {\n                    value\n                }\n                namespace {\n                    value\n                }\n                host {\n                    value\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-transformator",children:"Example Transformator"}),"\n",(0,a.jsx)(n.p,{children:"The transformator is a Python script that transforms the data fetched from Infrahub into Kubernetes manifests. It uses the GraphQL queries defined above to fetch the necessary data and then generates the manifests based on a YAML Template stored in the same Git repository."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import Dict, Any\nfrom infrahub_sdk.transforms import InfrahubTransform\nfrom .helperfunctions import HelperFunctions\nfrom pathlib import Path\n\n""" This Public Module provides:\n- Get Information from the GraphQL\n- Compare the Values with the Default YAML Templates\n"""\n\n\nclass TransformWebserver(InfrahubTransform):\n    """Transform data into a YAML string format based on a template."""\n\n    query = "GetWebserver"\n\n    async def transform(self, data: Dict[str, Any]) -> str:\n        """Transform the input data into a string format based on a YAML template.\n\n        Replacing values with the matching keys from the data.\n        """\n        currentpath = Path(__file__).resolve()\n        pathfile = str(currentpath.parents[1]) + "/YAML_Templates/webserver.yaml"\n        resultstring = ""\n\n        try:\n            with open(pathfile, "r") as yamlfile:\n                # Filter and extract the relevant keys from the input data\n                customizedkeyvalue = HelperFunctions.filternesteddict(data)\n                if not customizedkeyvalue:\n                    raise ValueError("No matching keys found in the input data.")\n\n                # Iterate through each line in the YAML template\n                for line in yamlfile:\n                    if ":" in line:\n                        lineprefix = line.split(":")\n                        lineresult = HelperFunctions.process_line(\n                            "".join(str(element) for element in lineprefix[1:]),\n                            customizedkeyvalue,\n                        )\n                        resultstring += lineprefix[0] + ":" + lineresult\n                    else:\n                        resultstring += line\n\n        except FileNotFoundError:\n            raise FileNotFoundError("YAML template file not found.")\n        except Exception as e:\n            raise RuntimeError(f"An error occurred during the transformation: {e}")\n\n        return resultstring\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from typing import Dict, Any, cast\nimport re\n\n\nclass HelperFunctions:\n    """Helper functions to process nested dictionaries and lines in text."""\n\n    singledict: Dict[str, str] = {}\n\n    @staticmethod\n    def filternesteddict(nesteddict: Dict[str, Any], key: str = "") -> Dict[str, str]:\n        """Filter nested dictionaries and store the result in a global dictionary."""\n        for nestedkey, value in nesteddict.items():\n            # Check if Dictionary is nested\n            if isinstance(value, dict):\n                HelperFunctions.filternesteddict(value, nestedkey)\n                continue\n            if isinstance(value, list) and (\n                isinstance(value[0], dict) or isinstance(value[0], list)\n            ):\n                HelperFunctions.filternesteddict(\n                    cast(Dict[str, Any], value[0]), nestedkey\n                )\n                continue\n\n            # Write the key-value pair to the global single dictionary\n            HelperFunctions.singledict[key.lower()] = str(value).lower()\n\n        return HelperFunctions.singledict\n\n    @staticmethod\n    def match_key_in_line(line: str, key: str) -> bool:\n        """Check if a specific key is present in the line (case-insensitive)."""\n        pattern = rf"\\W{re.escape(key)}\\W"  # Searching for a non-word Character (like -), de key word and non-word character.\n        return bool(re.search(pattern, line, re.IGNORECASE))\n\n    @staticmethod\n    def process_line(line: str, customizedkeyvalue: Dict[str, Any]) -> str:\n        """Process each line, replacing matching keys with values from the input data."""\n        for key, value in customizedkeyvalue.items():\n            if HelperFunctions.match_key_in_line(line, key):\n                line = line.replace(key, value)\n        return line\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-yaml-template",children:"Example YAML Template"}),"\n",(0,a.jsxs)(n.p,{children:["This is an example YAML template for a ",(0,a.jsx)(n.code,{children:"Webserver"})," resource. It will be used in the transformator the values specified in the Infrahub resource will be replaced in the template."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-YAML",children:"---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns-namespace\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dep-name\n  namespace: ns-namespace\n  labels:\n    app: l-name\nspec:\n  replicas: replicas\n  selector:\n    matchLabels:\n      app: l-name\n  template:\n    metadata:\n      labels:\n        app: l-name\n    spec:\n      containers:\n        - name: con-name\n          image: image\n          ports:\n            - containerPort: containerport\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: svc-name\n  namespace: ns-namespace\n  labels:\n    app: l-name\nspec:\n  ports:\n    - port: port\n      name: http\n  selector:\n    app: l-name\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ing-name\n  namespace: ns-namespace\nspec:\n  rules:\n    - host: host\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: svc-name\n                port:\n                  number: port\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-\xecnfrahubyaml",children:"Example \xecnfrahub.yaml`"}),"\n",(0,a.jsxs)(n.p,{children:["This is an example of how to the final artifact definition for the ",(0,a.jsx)(n.code,{children:"Webserver"})," resource looks like. It defines the artifact name, parameters, content type, targets, and transformation function."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'\nqueries:\n  - name: GetWebserver\n    file_path: "GraphQL/GetWebserver.gql"\n  - name: ArtifactIDs\n    file_path: "GraphQL/ArtifactIDs.gql"\n\nschemas:\n  - "Schema/service-schema.yaml"\n\npython_transforms:\n  - name: TransformWebserver\n    class_name: TransformWebserver\n    file_path: "python_transform/transform_webserver.py"\n\nartifact_definitions:\n  - name: "Webserver_Artifact_Definition"\n    artifact_name: "Webserver_Manifest"\n    parameters:\n      webserver: "name__value"\n    content_type: "application/yaml"\n    targets: "g_webserver"\n    transformation: "TransformWebserver"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Once the Artifact Definition is created by integrating the git repo with all resources, you can create the ",(0,a.jsx)(n.code,{children:"Webserver"})," resource in Infrahub and add it to the target group ",(0,a.jsx)(n.code,{children:"g_webserver"}),". The Vidra Operator will then use the transformator to generate the Kubernetes manifests based on the data fetched from Infrahub."]}),"\n",(0,a.jsx)(n.h2,{id:"example-schema-for-webserver",children:"Example Schema for Webserver:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'version: "1.0"\ngenerics:\n  - name: Ressource\n    namespace: Kubernetes\n    description: Generic Device Data\n    branch: aware\n    include_in_menu: false\n    display_labels:\n      - name__value\n    order_by:\n      - name__value\n    uniqueness_constraints:\n      - ["name__value", "namespace__value"]\n    attributes:\n      - name: name\n        kind: Text\n        description: Name of your Webservice\n        order_weight: 1\n      - name: namespace\n        kind: Text\n        description: Namespace name - Default ns-namespace\n        order_weight: 2\n      - name: description\n        kind: Text\n        description: Additional Informations about the Webservice\n        optional: true\n        order_weight: 3\nnodes:\n  - name: Webserver\n    namespace: Kubernetes\n    icon: mdi:hand-extended\n    include_in_menu: true\n    generate_template: true\n    inherit_from:\n      - KubernetesRessource\n      - CoreArtifactTarget\n    attributes:\n      - name: port\n        kind: Number\n        description: The Port Number on which the Service is reachable\n        optional: false\n        regex: ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-9][0-9]{0,3})$  # yamllint disable-line rule:line-length\n      - name: containerport\n        kind: Number\n        description: The Port Number on which the Container is reachable\n        optional: false\n        regex: ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-9][0-9]{0,3})$  # yamllint disable-line rule:line-length\n      - name: replicas\n        kind: Number\n        description: The Number of replicas of the Deployment\n        optional: false\n        regex: ^[1-5]$\n      - name: version\n        kind: Number\n        description: The Version of the Deployment\n        optional: true\n        regex: ^[1-5]$\n      - name: host\n        kind: Text\n        description: URL to the Webserver x.iac-ba.network.garden\n        read_only: true\n        optional: false\n        computed_attribute:\n          kind: Jinja2\n          jinja2_template: "{{ name__value }}.iac-ba.network.garden"\n      - name: image\n        kind: Dropdown\n        optional: false\n        choices:\n          - name: httpd:latest\n            description: Image for the Apache Webserver\n            color: "#7f7fff"\n          - name: nginx:latest\n            description: Image for the Nginx Webserver\n            color: "#aeeeee"\n          - name: marcincuber/2048-game\n            description: Image for classic 2048 game\n            color: "#008000"\n          - name: public.ecr.aws/pahudnet/nyancat-docker-image\n            description: Image for Nyan Cat Docker image\n            color: "#FFFF00"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},7293:(e,n,t)=>{t.d(n,{A:()=>L});var r=t(6540),a=t(4848);function i(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=r.Children.toArray(e),t=n.find((e=>r.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),i=n.filter((e=>e!==t)),s=t?.props.children;return{mdxAdmonitionTitle:s,rest:i.length>0?(0,a.jsx)(a.Fragment,{children:i}):null}}(e.children),i=e.title??n;return{...e,...i&&{title:i},children:t}}var s=t(4164),o=t(1312),l=t(7559);const c="admonition_xJq3",d="admonitionHeading_Gvgb",h="admonitionIcon_Rf37",u="admonitionContent_BuS1";function m({type:e,className:n,children:t}){return(0,a.jsx)("div",{className:(0,s.A)(l.G.common.admonition,l.G.common.admonitionType(e),c,n),children:t})}function p({icon:e,title:n}){return(0,a.jsxs)("div",{className:d,children:[(0,a.jsx)("span",{className:h,children:e}),n]})}function f({children:e}){return e?(0,a.jsx)("div",{className:u,children:e}):null}function v(e){const{type:n,icon:t,title:r,children:i,className:s}=e;return(0,a.jsxs)(m,{type:n,className:s,children:[r||t?(0,a.jsx)(p,{title:r,icon:t}):null,(0,a.jsx)(f,{children:i})]})}function g(e){return(0,a.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,a.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const b={icon:(0,a.jsx)(g,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function x(e){return(0,a.jsx)(v,{...b,...e,className:(0,s.A)("alert alert--secondary",e.className),children:e.children})}function y(e){return(0,a.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,a.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const j={icon:(0,a.jsx)(y,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function w(e){return(0,a.jsx)(v,{...j,...e,className:(0,s.A)("alert alert--success",e.className),children:e.children})}function _(e){return(0,a.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,a.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const k={icon:(0,a.jsx)(_,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function A(e){return(0,a.jsx)(v,{...k,...e,className:(0,s.A)("alert alert--info",e.className),children:e.children})}function I(e){return(0,a.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,a.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const N={icon:(0,a.jsx)(I,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function T(e){return(0,a.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,a.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const D={icon:(0,a.jsx)(T,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const W={icon:(0,a.jsx)(I,{}),title:(0,a.jsx)(o.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const M={...{note:x,tip:w,info:A,warning:function(e){return(0,a.jsx)(v,{...N,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,a.jsx)(v,{...D,...e,className:(0,s.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,a.jsx)(x,{title:"secondary",...e}),important:e=>(0,a.jsx)(A,{title:"important",...e}),success:e=>(0,a.jsx)(w,{title:"success",...e}),caution:function(e){return(0,a.jsx)(v,{...W,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})}}};function L(e){const n=i(e),t=(r=n.type,M[r]||(console.warn(`No admonition component found for admonition type "${r}". Using Info as fallback.`),M.info));var r;return(0,a.jsx)(t,{...n})}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2964],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},8520:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"topics/coding-conventions","title":"Coding Conventions","description":"We follow the Effective Go guidelines as the foundation for our coding conventions. This document summarizes the most important practices and tools enforced in this project.","source":"@site/docs/topics/coding-conventions.mdx","sourceDirName":"topics","slug":"/topics/coding-conventions","permalink":"/topics/coding-conventions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Coding Conventions","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Contributor Guide","permalink":"/topics/contributions"},"next":{"title":"Cluster Setup","permalink":"/topics/deploy"}}');var s=t(4848),r=t(8453);const l={title:"Coding Conventions",sidebar_position:4},c="Coding Conventions",o={},d=[{value:"Naming",id:"naming",level:2},{value:"General Rules",id:"general-rules",level:3},{value:"Examples",id:"examples",level:3},{value:"Formatting",id:"formatting",level:2},{value:"Linting",id:"linting",level:2},{value:"Usage",id:"usage",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Example",id:"example",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"coding-conventions",children:"Coding Conventions"})}),"\n",(0,s.jsxs)(n.p,{children:["We follow the ",(0,s.jsx)(n.a,{href:"https://golang.org/doc/effective_go.html",children:(0,s.jsx)(n.strong,{children:"Effective Go"})})," guidelines as the foundation for our coding conventions. This document summarizes the most important practices and tools enforced in this project."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"naming",children:"Naming"}),"\n",(0,s.jsx)(n.h3,{id:"general-rules",children:"General Rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"camelCase"})," for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Local variables"}),"\n",(0,s.jsx)(n.li,{children:"Private functions and methods (unexported)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PascalCase"})," for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Exported functions"}),"\n",(0,s.jsx)(n.li,{children:"Types (structs, interfaces, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Constants that need to be exported"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Context"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Variable name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"infrahubSync"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Exported function name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GetSortedListByLabel()"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Exported type"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DynamicMulticlusterFactory"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Unexported function"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"processArtifacts()"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"formatting",children:"Formatting"}),"\n",(0,s.jsx)(n.p,{children:"All code must be formatted using the official Go formatting tool:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://pkg.go.dev/cmd/gofmt",children:(0,s.jsx)(n.code,{children:"gofmt"})}),": Standard formatting tool from the Go toolchain.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Most editors apply this automatically."}),"\n",(0,s.jsxs)(n.li,{children:["Run ",(0,s.jsx)(n.code,{children:"gofmt -s -w ."})," to format code and simplify syntax."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"linting",children:"Linting"}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.a,{href:"https://golangci-lint.run/",children:(0,s.jsx)(n.code,{children:"golangci-lint"})})," as the primary linting tool. It aggregates multiple linters including ",(0,s.jsx)(n.code,{children:"staticcheck"}),", ",(0,s.jsx)(n.code,{children:"govet"}),", ",(0,s.jsx)(n.code,{children:"gocritic"}),", and others."]}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"To run linting locally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"make lint\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.p,{children:"Use Interfaces to define behavior and decouple components. This allows for easier testing and mocking."}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"//Domain Layer\ntype DynamicMulticlusterFactory interface {\n\tGetCachedClientFor(ctx context.Context, serverURL string, k8sClient client.Client) (client.Client, error)\n}\n// Adapter Layer\ntype DynamicMulticlusterFactory struct {\n\tmu      sync.Mutex\n\tclients map[string]client.Client\n}\n\nfunc NewDynamicMulticlusterFactory() *DynamicMulticlusterFactory {\n\treturn &DynamicMulticlusterFactory{\n\t\tclients: make(map[string]client.Client),\n\t}\n}\n\nfunc (f *DynamicMulticlusterFactory) GetCachedClientFor(ctx context.Context, serverURL string, k8sClient client.Client) (client.Client, error) {\n    // Implementation details...\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);
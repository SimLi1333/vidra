name: Operator CI
on:
  push:
      branches: [ "main" ]
      # Publish semver tags as releases
      tags: [ 'v*.*.*' ]
      paths:
          - 'cmd/**'
          - 'go.*'
          - 'api/**'
          - 'controllers/**'
          - 'config/**'
          - 'hack/**'
          - 'test/**'
          - 'Dockerfile'
          - 'chart/**'
          - 'bundle.Dockerfile'
          - '.dockerignore'
          - 'Makefile'
          - '.github/workflows/main.yaml'
  pull_request:
      branches: [ "main" ]
      paths:
          - 'cmd/**'
          - 'go.*'
          - 'api/**'
          - 'controllers/**'
          - 'config/**'
          - 'hack/**'
          - 'test/**'
          - 'Dockerfile'
          - 'chart/**'
          - 'bundle.Dockerfile'
          - '.dockerignore'
          - 'Makefile'
          - '.github/workflows/main.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  OPERATOR_SDK_VERSION: v1.39.2
  OS: linux
  TARGETARCH: amd64
  GO111MODULE: "on"
  GOCACHE: ${{ github.workspace }}/.cache/go-build
  GOPATH: ${{ github.workspace }}/.cache/go
  CGO_ENABLED: "0"
  ENVTEST_K8S_VERSION: "1.31.0"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    container: golang:1.24
    continue-on-error: true
    env:
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            .cache/go
            .cache/go-build
          key: ${{ runner.os }}-go-${{ github.ref_name }}
      - run: go version
      - run: make fmt
      - run: make vet
      - run: make lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-24.04
    container: golang:1.24
    env:
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            .cache/go
            .cache/go-build
          key: ${{ runner.os }}-go-${{ github.ref_name }}
      - run: go version
      - run: make test 
      - name: Save coverage
        run: echo "Saving coverage..."
      - name: Upload coverage.out
        uses: actions/upload-artifact@v4
        with:
          name: cover.out
          path: cover.out
          retention-days: 7

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    container: golang:1.24
    needs: unit-test
    if: github.event_name == 'pull_request' || github.ref_name == 'main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download cover.out
        uses: actions/download-artifact@v4
        with:
          name: cover.out

      - name: Install goveralls
        run: go install github.com/mattn/goveralls@v0.0.11

      - name: Generate Coverage Report
        run: |
          go tool cover -func=cover.out
          go tool cover -html=cover.out -o coverage.html
      - name: Extract Coverage Percentage and Generate Badge
        run: |
          apt-get update && apt-get install -y jq
          TOTAL=$(go tool cover -func=cover.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$TOTAL" >> $GITHUB_ENV
          echo "Extracted Coverage: $TOTAL%"
          echo "{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"${TOTAL}%\", \"color\": \"green\"}" > coverage-badge.json
          mkdir -p public
          mv coverage-badge.json public/
      - name: Upload HTML Coverage and Raw Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.html
            cover.out
          retention-days: 7

      - name: Deploy Badge to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

  publish:
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write
        id-token: write
    needs: unit-test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: main

    # Workaround: https://github.com/docker/build-push-action/issues/461
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login to registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install operator-sdk
      run: |
          curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk_${OS}_${TARGETARCH} \
          && chmod +x operator-sdk_${OS}_${TARGETARCH} \
          && mv operator-sdk_${OS}_${TARGETARCH} /usr/local/bin/operator-sdk \
          && echo $(operator-sdk version)
    - name: Create Bundle and Catalog and push to registry
      run: |
          make bundle
          make bundle-build bundle-push
          make catalog-build catalog-push

        # Sign the resulting Docker image digest except on PRs.
        # This will only write to the public Rekor transparency log when the Docker
        # repository is public to avoid leaking data.  If you would like to publish
        # transparency data even for private images, pass --force to cosign below.
        # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
      run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}